#!/bin/sh

function prepare_menu_location {
# moving the old menu out of the way

  if [ "$OWN_MENU" == "true" ]; then
    [ -e "$ION_USER_MENU" ] &&
    mv $ION_USER_MENU $ION_USER_MENU.$(date +%Y%m%d%H%M%S)
    IONMENU="$ION_USER_MENU"
  else
    [ -e "$ION_MENU" ] &&
    mv $ION_MENU $ION_MENU.$(date +%Y%m%d%H%M%S)
    IONMENU="$ION_MENU"
  fi

  local menuname=`basename "$IONMENU"`
  local menudir=`echo "$IONMENU"|sed "s/\/$menuname//"`
  [ -d "$menudir" ] || mkdir -p "$menudir"
}

function start_ion_menu {
# the start of the ion menu
cat >> $IONMENU << EOF
-- Warning, this file is automatically generated
-- DO NOT EDIT
--
-- Start of the ion menu

--
-- Ion menu definitions
--

-- Main menu
  defmenu("mainmenu", {
    submenu("Programs",         "appmenu"),
    menuentry("Run...",         "mod_query.query_exec(_)"),
    submenu("Ion",              "ion"),
})

EOF
}

function build_appmenu() {
# ion dropped inline submenus, so we have to generate an index... :(
  local menu=""
  echo "defmenu(\"appmenu\", {" >> $IONMENU
  for menu in $(grep "START_SUB" $SORTED_INVENTORY| cut -f2 -d" " ); do
    local menuname="$( echo "$menu" | tr [A-Z] [a-z] )"
    [ -n $menu ] && [ -n $menuname ] &&
    echo "    submenu(\"$menu\",      \"$menuname\")," >> $IONMENU
  done
  echo "})" >> $IONMENU
  echo "" >> $IONMENU
}

function close_ion_menu() {
# closing the ion menu
cat >> $IONMENU << EOF
  
defmenu("ion", {
    menuentry("Help",      "mod_query.query_man(_)"),
    menuentry("About Ion", "mod_query.show_about_ion(_)"),
    submenu("Styles",      "stylemenu"),
    submenu("Session",     "sessionmenu"),
})

-- Session control menu
defmenu("sessionmenu", {
    menuentry("Save",           "ioncore.snapshot()"),
    menuentry("Restart",        "ioncore.restart()"),
    menuentry("Exit",           "ioncore.shutdown()"),
})

-- Context menu (frame/client window actions)
defctxmenu("WFrame", {
    menuentry("Close",          "WRegion.rqclose_propagate(_, _sub)"),
    menuentry("Kill",           "WClientWin.kill(_sub)",
                                "_sub:WClientWin"),
    menuentry("(Un)tag",        "WRegion.toggle_tag(_sub)",
                                "_sub:non-nil"),
    menuentry("Attach tagged",  "WFrame.attach_tagged(_)"),
    menuentry("Clear tags",     "ioncore.clear_tags()"),
    menuentry("Window info",    "mod_query.show_clientwin(_, _sub)",
                                "_sub:WClientWin"),
})


-- End of the ion menu
  
EOF
}

function insert_submenu_begin() {
  local menuname="$(echo "$1" | tr [A-Z] [a-z] )"
  echo "defmenu(\"$menuname\",  {" >>$IONMENU
}

function insert_submenu_end {
  echo "})" >>$IONMENU
  echo "" >> $IONMENU
}

function insert_entry() {
    menuline=$1
    APP=`echo $menuline|cut -f1 -d":" `
    EXEC=`echo $menuline|cut -f4 -d":" `
    TERM=`echo $menuline|cut -f5 -d":" `
    if [[ $TERM == true ]] ; then
      echo "    menuentry(\"$APP\", \"ioncore.exec_on(_, 'xterm -e $EXEC')\")," >>$IONMENU
    else
      echo "    menuentry(\"$APP\", \"ioncore.exec_on(_, '$EXEC')\")," >>$IONMENU
    fi
}

function build_menu {
  cat $SORTED_INVENTORY | while read line ; do
    case $line in
        START_SUB*) insert_submenu_begin `echo $line|cut -f2 -d" " ` ;;
	END_SUB) insert_submenu_end ;;
        *) insert_entry "$line" ;;
    esac
  done
}

# building the menu
prepare_menu_location &&
start_ion_menu &&
build_appmenu &&
build_menu &&
close_ion_menu ||
echo "Generating of the ion menu has failed!"
